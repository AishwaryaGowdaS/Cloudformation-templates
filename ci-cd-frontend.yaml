AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Template for CI/CD pipeline for frontend applications
Parameters:
  BuildSpecFileName:
    Type: String
    Description: Name of the buildspec file for codebuild
    Default: buildspec.yml
    AllowedValues:
      - buildspec.yml
      - buildspec.stage.yml
      - buildspec.prod.yml
      - buildspec.prod.us.yml
      - buildspec.prod.eu.yml
      - buildspec.webapp.yml
  ServiceName:
    Type: String
    Description: 'Name of the container mentioned in buildspec file (less than 25 characters), eg: scrut-nodejs-test'
  ContainerPortNumber:
    Type: Number
    Description: 'Port of server running, eg: 4034'
  Cpu:
    Type: Number
    Description: Min vCPU needed to run this service
    Default: 256
    AllowedValues:
      - 256
      - 512
      - 1024
      - 2048
      - 4096
  Memory:
    Type: Number
    Description: Min Memory needed to run this service
    Default: 512
    AllowedValues:
      - 512
      - 1024
      - 2048
      - 4096
      - 8192
  BranchName:
    Type: String
    Description: 'Name of the github branch to deploy, eg: kushankur/dev'
    Default: master
  RepositoryName:
    Type: String
    Description: 'Name of the Github Repository, eg: scrut-grc-webapp'
Mappings:
  RegionMap:
    us-east-1:
      ECSClusterName: gomigo-development
      CodePipelineArtifactStoreS3Bucket: codepipeline-us-east-1-123456789
      Certificate: arn:aws:acm:us-east-1:123456789:certificate/123456789
      SecurityGroup: sg-123456789
      VpcId: vpc-123456789
      SubnetIds:
        - subnet-123456789
        - subnet-123456789
      LoadBalancerArn: arn:aws:elasticloadbalancing:us-east-1:123456789:loadbalancer/app/scrut-dev/123456789
    us-east-2:
      ECSClusterName: scrut-production-us
      CodePipelineArtifactStoreS3Bucket: codepipeline-us-east-2-123456789
      Certificate: arn:aws:acm:us-east-2:123456789:certificate/123456789
      SecurityGroup: sg-123456789
      VpcId: vpc-123456789
      SubnetIds:
        - subnet-123456789
        - subnet-123456789
      LoadBalancerArn: arn:aws:elasticloadbalancing:us-east-2:123456789:loadbalancer/app/scrut-production-us/123456789
    us-west-2:
      ECSClusterName: scrut-staging
      CodePipelineArtifactStoreS3Bucket: codepipeline-us-west-2-123456789
      Certificate: arn:aws:acm:us-west-2:123456789:certificate/123456789
      SecurityGroup: sg-123456789
      VpcId: vpc-123456789
      SubnetIds:
        - subnet-123456789
        - subnet-123456789
      LoadBalancerArn: arn:aws:elasticloadbalancing:us-west-2:123456789:loadbalancer/app/scrut-staging-alb/123456789
    ap-south-1:
      ECSClusterName: scrut-prod
      CodePipelineArtifactStoreS3Bucket: codepipeline-ap-south-1-123456789
      Certificate: arn:aws:acm:ap-south-1:123456789:certificate/123456789
      SecurityGroup: sg-123456789
      VpcId: vpc-123456789
      SubnetIds:
        - subnet-123456789
        - subnet-123456789
      LoadBalancerArn: arn:aws:elasticloadbalancing:ap-south-1:123456789:loadbalancer/app/scrut-prod/123456789
    eu-north-1:
      ECSClusterName: scrut-eu
      CodePipelineArtifactStoreS3Bucket: codepipeline-eu-north-1-123456789
      Certificate: arn:aws:acm:eu-north-1:123456789:certificate/123456789
      SecurityGroup: sg-123456789
      VpcId: vpc-123456789
      SubnetIds:
        - subnet-123456789
        - subnet-123456789
      LoadBalancerArn: arn:aws:elasticloadbalancing:eu-north-1:123456789:loadbalancer/app/loadbalancer-eu/123456789
Resources:
  MyECRRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: !Ref ServiceName
  MyTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    DependsOn:
      - MyLogGroup
      - MyECRRepository
    Properties:
      Family: !Join ['', [!Ref ServiceName, TaskDefinition]]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: 'arn:aws:iam::123456789:role/fluentd-s3'
      TaskRoleArn : 'arn:aws:iam::123456789:role/fluentd-s3'
      Cpu: !Ref Cpu
      Memory: !Ref Memory
      RuntimePlatform:
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Join
            - ''
            - - !GetAtt [MyECRRepository, "RepositoryUri"]
              - ':latest'
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref MyLogGroup
              awslogs-stream-prefix: ecs
  MyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ '', [ /ecs/, !Ref ServiceName, TaskDefinition ] ]
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Ref ServiceName
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !FindInMap [RegionMap, !Ref "AWS::Region", VpcId]
  MyListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref MyTargetGroup
          Type: forward
      LoadBalancerArn: !FindInMap [RegionMap, !Ref "AWS::Region", LoadBalancerArn]
      Port: !Ref ContainerPortNumber
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !FindInMap [RegionMap, !Ref "AWS::Region", Certificate]
  MyECSService:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - MyListenerHTTPS
    Properties:
      ServiceName:  !Ref ServiceName
      Cluster: !FindInMap [RegionMap, !Ref "AWS::Region", ECSClusterName]
      DesiredCount: 0
      LaunchType: FARGATE
      TaskDefinition: !Ref MyTaskDefinition
      LoadBalancers:
        - ContainerName:  !Ref ServiceName
          ContainerPort:  80
          TargetGroupArn: !Ref MyTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !FindInMap [RegionMap, !Ref "AWS::Region", SecurityGroup]
          Subnets: !FindInMap [RegionMap, !Ref "AWS::Region", SubnetIds]
  MyCodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::378176467373:policy/ssm_GetParameter
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
      Policies:
        - PolicyName: !Sub ${ServiceName}-codebuild-base-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ServiceName}-CloudWatchLogs-BuildLogGroup-Name
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ServiceName}-CloudWatchLogs-BuildLogGroup-Name:*
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Effect: Allow
                Resource:
                  - !Sub arn:aws:s3:::codepipeline-${AWS::Region}-*
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
              - Effect: Allow
                Resource:
                  - !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${ServiceName}-*
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
  MyCodeBuild:
    Type: AWS::CodeBuild::Project
    DependsOn:
      - MyCodeBuildServiceRole
    Properties:
      Name: !Ref ServiceName
      Source:
        Type: GITHUB
        Location: !Join ['', [https://github.com/gomigo-labs/, !Ref RepositoryName, .git]]
        GitCloneDepth: 1
        BuildSpec: !Ref BuildSpecFileName
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:5.0
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: true
      ServiceRole: !Ref MyCodeBuildServiceRole
      Artifacts:
        Type: NO_ARTIFACTS
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Sub ${ServiceName}-CloudWatchLogs-BuildLogGroup-Name
  MyCodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${ServiceName}-codepipeline-base-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - iam:PassRole
                Resource: "*"
                Effect: Allow
                Condition:
                  StringEqualsIfExists:
                    iam:PassedToService:
                      - cloudformation.amazonaws.com
                      - elasticbeanstalk.amazonaws.com
                      - ec2.amazonaws.com
                      - ecs-tasks.amazonaws.com
              - Action:
                  - codecommit:CancelUploadArchive
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetRepository
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:UploadArchive
                Resource: "*"
                Effect: Allow
              - Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                Resource: "*"
                Effect: Allow
              - Action:
                  - codestar-connections:UseConnection
                Resource: "*"
                Effect: Allow
              - Action:
                  - elasticbeanstalk:*
                  - ec2:*
                  - elasticloadbalancing:*
                  - autoscaling:*
                  - cloudwatch:*
                  - s3:*
                  - sns:*
                  - cloudformation:*
                  - rds:*
                  - sqs:*
                  - ecs:*
                Resource: "*"
                Effect: Allow
              - Action:
                  - lambda:InvokeFunction
                  - lambda:ListFunctions
                Resource: "*"
                Effect: Allow
              - Action:
                  - opsworks:CreateDeployment
                  - opsworks:DescribeApps
                  - opsworks:DescribeCommands
                  - opsworks:DescribeDeployments
                  - opsworks:DescribeInstances
                  - opsworks:DescribeStacks
                  - opsworks:UpdateApp
                  - opsworks:UpdateStack
                Resource: "*"
                Effect: Allow
              - Action:
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:ValidateTemplate
                Resource: "*"
                Effect: Allow
              - Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuildBatches
                  - codebuild:StartBuildBatch
                Resource: "*"
                Effect: Allow
              - Effect: Allow
                Action:
                  - devicefarm:ListProjects
                  - devicefarm:ListDevicePools
                  - devicefarm:GetRun
                  - devicefarm:GetUpload
                  - devicefarm:CreateUpload
                  - devicefarm:ScheduleRun
                Resource: "*"
              - Effect: Allow
                Action:
                  - servicecatalog:ListProvisioningArtifacts
                  - servicecatalog:CreateProvisioningArtifact
                  - servicecatalog:DescribeProvisioningArtifact
                  - servicecatalog:DeleteProvisioningArtifact
                  - servicecatalog:UpdateProduct
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudformation:ValidateTemplate
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:DescribeImages
                Resource: "*"
              - Effect: Allow
                Action:
                  - states:DescribeExecution
                  - states:DescribeStateMachine
                  - states:StartExecution
                Resource: "*"
              - Effect: Allow
                Action:
                  - appconfig:StartDeployment
                  - appconfig:StopDeployment
                  - appconfig:GetDeployment
                Resource: "*"
  MyCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn:
      - MyCodePipelineServiceRole
      - MyCodeBuild
    Properties:
      Name: !Ref ServiceName
      RoleArn: !GetAtt MyCodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !FindInMap [RegionMap, !Ref "AWS::Region", CodePipelineArtifactStoreS3Bucket]
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
              Configuration:
                Owner: gomigo-labs
                Repo: !Ref RepositoryName
                Branch: !Ref BranchName
                PollForSourceChanges: False
                OAuthToken: ghp_123456789
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              RunOrder: 2
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: !Ref ServiceName
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: 1
              RunOrder: 3
              Configuration:
                ClusterName: !FindInMap [RegionMap, !Ref "AWS::Region", ECSClusterName]
                ServiceName: !Ref ServiceName
              InputArtifacts:
                - Name: BuildArtifact
